# Optimisation with an ecology penalty in the Pentland Firth
# ==========================================================
#
#
# Introduction
# ************
#
# This example demonstrates how OpenTidalFarm can be used to integrate
# ecological penalties into the optimisation process.
#
# It shows how to:
#   - load a mesh from file;
#   - use realistic tidal forcing on the open boundaries;
#   - load the bathymetry from a NetCDF file;
#   - use a non-homogenous viscosity;
#   - solve a time-dependent shallow water solver and store the results to file.
#
# We will be simulating the tides in the Pentland Firth, Scotland for 12.5
# hours, starting at 14:40 am on the 18.9.2001. The flow result at the end of
# the simulation looks like:
#
# .. image:: flow.png
#     :scale: 80
#
# This example requires some large data files, that must be downloaded
# separately by calling in the source code directory:
#
# .. code-block:: bash
#
#    git submodule init
#    git submodule update


# Implementation
# **************

# We begin with importing the OpenTidalFarm module.


from opentidalfarm import *
from model_turbine import ModelTurbine
set_log_level(INFO)

model_turbine = ModelTurbine()
print model_turbine

# First we define the computational domain. We load a previously generated mesh
# (using ```Gmsh``` and converted with ```dolfin-convert```):

domain = FileDomain('mesh_coarse/coast.xml')

# Next we get the default parameters of a shallow water problem and configure it
# to our needs.

prob_params = SteadySWProblem.default_parameters()
prob_params.domain = domain

# input the location of the eco domain, this cpvers the south coast of Stroma

eco_x_start = 492000
eco_y_start = 6503000
eco_x_end = eco_x_start + 2000
eco_y_end = eco_y_start + 1000


class EcoDomain(SubDomain):
    def inside(self, x, on_boundary):
        return (eco_x_start <= x[0] <= eco_x_end and
                eco_y_start <= x[1] <= eco_y_end)
eco_domain = EcoDomain()

# Next we load the bathymetry from the NetCDF file.

V = FunctionSpace(domain.mesh, 'CG', 1)
depth = Function(V, name="depth")
File("mesh_coarse/bathymetry.xml") >> depth
prob_params.depth = depth

# The bathymetry can be visualised with

#plot(bathy_expr, mesh=domain.mesh, title="Bathymetry", interactive=True)

# Equation settings

# For stability reasons, we want to increase the viscosity at the inflow and
# outflow boundary conditions. For that, we read in a precomputed function
# (generated by ```compute_distance```)

dist = Function(V)
File("dist.xml") >> dist

# With that we can define an expression that evaluates to a nu_inside value
# inside the domain and a nu_outside value near the in/outflow boundary.

class ViscosityExpression(Expression):
    def __init__(self, dist_function, dist_threshold, nu_inside, nu_boundary):
        self.dist_function = dist_function
        self.nu_inside = nu_inside
        self.nu_boundary = nu_boundary
        self.dist_threshold = dist_threshold

    def eval(self, value, x):
        if self.dist_function(x) > self.dist_threshold:
            value[0] = self.nu_inside
        else:
            value[0] = self.nu_boundary

# Finally, we interpolate this expression to a piecewise discontinuous, constant
# function and attach it as the viscosity value to the shallow water problem.

W = FunctionSpace(domain.mesh, "DG", 0)
nu = ViscosityExpression(dist, dist_threshold=1000, nu_inside=115.,
                         nu_boundary=1e3)
nu_func = interpolate(nu, W)
prob_params.viscosity = nu_func

# create the farm and the domains
turbine = SmearedTurbine()
U = FunctionSpace(domain.mesh, "DG", 0)
farm = Farm(domain, turbine, function_space=U)

domains = MeshFunction("size_t", domain.mesh, "mesh_coarse/coast_physical_region.xml")


eco_domain.mark(domains, 3)
dx = Measure("dx")[domains]
farm.site_dx = dx(2)
prob_params.eco_dx = dx(3)
prob_params.tidal_farm = farm

# The free-slip boundary conditions are a special case. The boundary condition
# type `weak_dirichlet` enforces the boundary value *only* in the *normal*
# direction of the boundary. Hence, a zero weak Dirichlet boundary condition
# gives us free-slip, while a zero `strong_dirichlet` boundary condition would
# give us no-slip.
bcs = BoundaryConditionSet()
bcs.add_bc("u", Constant((2, 0)), facet_id=1)
bcs.add_bc("eta", Constant(0), facet_id=1)
bcs.add_bc("eta", Constant(0), facet_id=2)
bcs.add_bc("u", Constant((0, 0)), facet_id=3, bctype="strong_dirichlet")

# set parameters
prob_params.bcs = bcs
prob_params.friction = Constant(0.0025)
prob_params.eco_penalty_multiplier = 3000
prob_params.initial_condition = Expression(("1e-7", "0", "0"))

# set up problem and solver
problem = SteadySWProblem(prob_params)
sol_params = CoupledSWSolver.default_parameters()
sol_params.dump_period = 1
sol_params.cache_forward_state = False
solver = CoupledSWSolver(problem, sol_params)

#read in ambient flow
Vamb = VectorFunctionSpace(domain.mesh, 'CG', 1, dim=2)
u_ambient = Function(Vamb,'ambient.xml')

# build functional
functional = PowerFunctional(problem) - 4800*CostFunctional(problem) \
   - EcologyFunctional(problem, u_ambient)

# build reduced functional
control = TurbineFarmControl(farm)
rf_params = ReducedFunctional.default_parameters()
rf_params.automatic_scaling = None
rf = ReducedFunctional(functional, control, solver, rf_params)

print rf_params

# optimise
f_opt = maximize(rf, bounds=[0, model_turbine.maximum_smeared_friction],
                 method="L-BFGS-B", options={'maxiter': 30})
